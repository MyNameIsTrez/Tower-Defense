package data;

import static helpers.Artist.TILE_SIZE;
import static helpers.Artist.drawQuadTex;
import static helpers.Artist.drawQuadTexRot;
import static helpers.Artist.quickLoad;
import static helpers.Clock.delta;

import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;

import org.newdawn.slick.opengl.Texture;

public abstract class Tower implements Entity {

	public Texture[] textures;
	public float x, y, timeSinceLastShot, firingSpeed, angle;
	public int width, height, damage, range;
	public Enemy target;
	public CopyOnWriteArrayList<Enemy> enemyList;
	public boolean targeted;
	public ArrayList<Projectile> projectiles;

	public Tower(TowerType type, Tile startTile, CopyOnWriteArrayList<Enemy> enemyList) {
		this.textures = type.textures;
		this.damage = type.damage;
		this.range = type.range;
		this.firingSpeed = type.firingSpeed;

		this.x = startTile.getX();
		this.y = startTile.getY();
		this.width = startTile.getWidth();
		this.height = startTile.getHeight();

		this.enemyList = enemyList;
		this.targeted = false;
		this.timeSinceLastShot = 0f;
		this.projectiles = new ArrayList<Projectile>();
		this.angle = 0f;
	}

	public void update() {
		if (target == null || target.isAlive() == false)
			targeted = false;

//		gets the closest target and locks onto it; commenting this out lets it continuously target for the newest closest enemy
		if (!targeted) {
//			System.out.println("target is null");
			target = acquireTarget();
		}

		timeSinceLastShot += delta();
		if (timeSinceLastShot > firingSpeed && target != null) {
			shoot();
			timeSinceLastShot = 0;
		}

		for (Projectile p : projectiles)
			p.update();

		if (target != null)
			angle = calculateAngle();

		draw();
	}

	public void draw() {
		drawQuadTex(textures[0], x, y, width, height);
		if (textures.length > 1)
			for (int i = 1; i < textures.length; i++)
				drawQuadTexRot(textures[i], x, y, width, height, angle);
	}

	public Enemy acquireTarget() {
		Enemy closest = null;
		float closestDistance = 10000; // impossibly big number
		for (Enemy e : enemyList)
			if (isInRange(e) && findDistance(e) < closestDistance && e.isAlive()) {
				closestDistance = findDistance(e);
				closest = e;
			}
		if (closest != null)
			targeted = true;
		return closest;
	}

	private boolean isInRange(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		if (xDistance < range && yDistance < range)
			return true;
		return false;
	}

	private float findDistance(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		return xDistance + yDistance; // Shouldn't this use Pythagorean theorem instead for the total pixels away the
										// enemy is from the tower?
	}

	private float calculateAngle() {
		double angleTemp = Math.atan2(target.getY() - y, target.getX() - x);
		return (float) Math.toDegrees(angleTemp) - 90;
	}

	public void shoot() {
//		The projectile gets centered on the tile with x + Game.TILE_SIZE / 4.
		projectiles.add(new ProjectileBullet(quickLoad("bullet"), target, x + TILE_SIZE / 4, y + TILE_SIZE / 4,
				TILE_SIZE / 2, TILE_SIZE / 2, 900, damage));
	}

	public Enemy getTarget() {
		return target;
	}

	public void updateEnemyList(CopyOnWriteArrayList<Enemy> newEnemyList) {
		enemyList = newEnemyList;
	}

	public float getX() {
		return x;
	}

	public float getY() {
		return y;
	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	public void setX(float x) {
		this.x = x;
	}

	public void setY(float y) {
		this.y = y;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public void setHeight(int height) {
		this.height = height;
	}

}
