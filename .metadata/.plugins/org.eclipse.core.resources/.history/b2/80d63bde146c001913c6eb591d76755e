package data;

import static helpers.Artist.*;
import static helpers.Clock.*;

import java.util.ArrayList;

import org.newdawn.slick.opengl.Texture;

public class TowerCannon {

	private float x, y, timeSinceLastShot, rateOfFire, angle;
	private int width, height, damage, range;
	private Texture baseTexture, cannonTexture;
	private Tile startTile;
	private ArrayList<Projectile> projectiles;
	private ArrayList<Enemy> enemyList;
	private Enemy target;
	private boolean targeted;
	
	public TowerCannon(Texture baseTexture, Tile startTile, int damage, int range, ArrayList<Enemy> enemyList) {
		this.baseTexture = baseTexture;
		this.startTile = startTile;
		this.damage = damage;
		this.range = range;
		this.enemyList = enemyList;
		
		this.cannonTexture = quickLoad("cannonGun");
		this.x = startTile.getX();
		this.y = startTile.getY();
		this.width = startTile.getWidth();
		this.height = startTile.getHeight();
		this.rateOfFire = 1;
		this.timeSinceLastShot = 0;
		this.projectiles = new ArrayList<Projectile>();
		this.targeted = false;
//		this.target = acquireTarget();
//		this.angle = calculateAngle();
	}
	
	private Enemy acquireTarget() {
		Enemy closest = null;
		float closestDistance = 10000; // impossibly big number
		for (Enemy e : enemyList)
			if (isInRange(e) && findDistance(e) < closestDistance) {
				closestDistance = findDistance(e);
				closest = e;
			}
		if (closest != null)
			targeted = true;
		return closest;
	}
	
	private boolean isInRange(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		if (xDistance < range && yDistance < range)
			return true;
		return false;
	}
	
	private float findDistance(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		return xDistance + yDistance; // Shouldn't this use Pythagorean theorem instead for the total pixels away the enemy is from the tower?
	}
	
	private float calculateAngle() {
		double angleTemp = Math.atan2(target.getY() - y, target.getX() - x);
		return (float) Math.toDegrees(angleTemp) - 90;
	}
	
	private void shoot() {
//		The projectile gets centered on the tile with x + Game.TILE_SIZE / 4.
		projectiles.add(new Projectile(quickLoad("bullet"), target, x + Game.TILE_SIZE / 4, y + Game.TILE_SIZE / 4, Game.TILE_SIZE / 2, Game.TILE_SIZE / 2, 900, 10));
	}
	
	public void update() {
		if (!targeted)
			target = acquireTarget();
		timeSinceLastShot += delta();
		if (timeSinceLastShot > rateOfFire) {
			shoot();
			timeSinceLastShot = 0;
		}

		for (Projectile p : projectiles)
			p.update();
		
		angle = calculateAngle();

		Draw();
	}
	
	public void Draw() {
		drawQuadTex(baseTexture, x, y, width, height);
		drawQuadTexRot(cannonTexture, x, y, width, height, angle);
	}
	
}
