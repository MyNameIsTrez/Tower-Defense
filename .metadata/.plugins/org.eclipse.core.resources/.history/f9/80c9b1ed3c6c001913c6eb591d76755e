package data;

import static helpers.Artist.drawQuadTex;

import java.util.ArrayList;

import org.newdawn.slick.opengl.Texture;

public abstract class Tower implements Entity {

	private Texture[] textures;
	private float x, y;
	private int width, height, damage, range;
	private Enemy target;
	private ArrayList<Enemy> enemyList;
	private boolean targeted;

	public Tower(TowerType type, Tile startTile) {
		this.textures = type.textures;
		this.damage = type.damage;
		this.range = type.range;
		
		this.x = startTile.getX();
		this.y = startTile.getY();
		this.width = startTile.getWidth();
		this.height = startTile.getHeight();
		
		this.enemyList = new ArrayList<Enemy>();
		this.targeted = false;
	}

	public void update() {

	}

	public void draw() {
		for (int i = 0; i < textures.length; i++)
			drawQuadTex(textures[i], x, y, width, height);
	}

	private Enemy acquireTarget() {
		Enemy closest = null;
		float closestDistance = 10000; // impossibly big number
		for (Enemy e : enemyList)
			if (isInRange(e) && findDistance(e) < closestDistance && e.isAlive()) {
				closestDistance = findDistance(e);
				closest = e;
			}
		if (closest != null)
			targeted = true;
		return closest;
	}
	
	private boolean isInRange(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		if (xDistance < range && yDistance < range)
			return true;
		return false;
	}
	
	private float findDistance(Enemy e) {
		float xDistance = Math.abs(e.getX() - x);
		float yDistance = Math.abs(e.getY() - y);
		return xDistance + yDistance; // Shouldn't this use Pythagorean theorem instead for the total pixels away the enemy is from the tower?
	}

	public float getX() {
		return x;
	}

	public float getY() {
		return y;
	}

	public int getWidth() {
		return width;
	}

	public int getHeight() {
		return height;
	}

	public void setX(float x) {
		this.x = x;
	}

	public void setY(float y) {
		this.y = y;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public void setHeight(int height) {
		this.height = height;
	}

}
